<Project>
  <!-- Ensure NativeOutputPath is populated for consumer projects (examples/tests) on Windows ARM64 by staging redist first -->
  <Target Name="EnsureNativeRedistStaged" BeforeTargets="PrepareForRun" Condition="'$(OS)' == 'Windows_NT' and '$(NativeTargetArchitecture)' == 'arm64' and '$(SkipNative)' != 'true'">
    <Message Importance="High" Text="Ensuring Windows ARM64 native redist is staged to $(NativeOutputPath)" />
    <MSBuild Projects="$(RepoRoot)src\Redist\libtorch-cpu\libtorch-cpu.proj" Targets="Build" Properties="Configuration=$(NativeConfiguration);TargetOS=windows;TargetArchitecture=arm64" />
  </Target>

  <!-- We copy over the LibTorch native binaries in order to run tests.  This can probably be automated better. -->
  <!-- These lists are duplicated in redist/... with file splitting added for package prep -->

  <ItemGroup  Condition="'$(TestUsesLibTorch)' == 'true' and '$(SkipNative)' != 'true' ">
    <NativeAssemblyReference Include="LibTorchSharp" />
  </ItemGroup>

  <!-- Windows CPU libtorch binary list used for examples and testing -->
  <ItemGroup Condition="'$(NativeTargetArchitecture)' == 'x64' and '$(OS)' == 'Windows_NT' and '$(TestUsesLibTorch)' == 'true' and ('$(TestCuda)' != 'true' or '$(SkipCuda)' == 'true') and '$(SkipNative)' != 'true' ">
    <NativeAssemblyReference Include="asmjit" />
    <NativeAssemblyReference Include="c10" />
    <NativeAssemblyReference Include="fbgemm" />
    <NativeAssemblyReference Include="libiomp5md" />
    <NativeAssemblyReference Include="libiompstubs5md" />
    <NativeAssemblyReference Include="torch" />
    <NativeAssemblyReference Include="torch_cpu" />
    <NativeAssemblyReference Include="torch_global_deps" />
    <NativeAssemblyReference Include="uv" />
  </ItemGroup>

  <!-- Windows ARM64 CPU libtorch binary list used for examples and testing -->
  <ItemGroup Condition="'$(NativeTargetArchitecture)' == 'arm64' and '$(OS)' == 'Windows_NT' and '$(TestUsesLibTorch)' == 'true' and ('$(TestCuda)' != 'true' or '$(SkipCuda)' == 'true') and '$(SkipNative)' != 'true' ">
    <NativeAssemblyReference Include="aoti_custom_ops" />
    <NativeAssemblyReference Include="backend_with_compiler" />
    <NativeAssemblyReference Include="c10" />
    <NativeAssemblyReference Include="torchbind_test" />
    <NativeAssemblyReference Include="torch" />
    <NativeAssemblyReference Include="torch_cpu" />
    <NativeAssemblyReference Include="torch_global_deps" />
    <NativeAssemblyReference Include="uv" />
    <NativeAssemblyReference Include="jitbackend_test" />
    <NativeAssemblyReference Include="armpl_lp64" />
  </ItemGroup>

  <!-- Windows CUDA 12.1 libtorch binary list used for examples and testing -->
  <ItemGroup Condition="'$(NativeTargetArchitecture)' == 'x64' and '$(OS)' == 'Windows_NT' and '$(TestUsesLibTorch)' == 'true' and ('$(TestCuda)' == 'true' and '$(SkipCuda)' != 'true') and '$(SkipNative)' != 'true' ">
    <NativeAssemblyReference Include="asmjit" Variant="cuda\" />
    <NativeAssemblyReference Include="c10" Variant="cuda\" />
    <NativeAssemblyReference Include="c10_cuda" Variant="cuda\" />
    <NativeAssemblyReference Include="caffe2_nvrtc" Variant="cuda\" />
    <NativeAssemblyReference Include="cublas64_12" Variant="cuda\" />
    <NativeAssemblyReference Include="cublasLt64_12" Variant="cuda\" />
    <NativeAssemblyReference Include="cudart64_12" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn_adv64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn_cnn64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn_engines_precompiled64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn_engines_runtime_compiled64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn_graph64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn_heuristic64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cudnn_ops64_9" Variant="cuda\" />
    <NativeAssemblyReference Include="cufft64_11" Variant="cuda\" />
    <NativeAssemblyReference Include="cufftw64_11" Variant="cuda\" />
    <NativeAssemblyReference Include="cupti64_2025.1.0" Variant="cuda\" />
    <NativeAssemblyReference Include="curand64_10" Variant="cuda\" />
    <NativeAssemblyReference Include="cusolver64_11" Variant="cuda\" />
    <NativeAssemblyReference Include="cusolverMg64_11" Variant="cuda\" />
    <NativeAssemblyReference Include="cusparse64_12" Variant="cuda\" />
    <NativeAssemblyReference Include="fbgemm" Variant="cuda\" />
    <NativeAssemblyReference Include="libiomp5md" Variant="cuda\" />
    <NativeAssemblyReference Include="libiompstubs5md" Variant="cuda\" />
    <NativeAssemblyReference Include="nvJitLink_120_0" Variant="cuda\" />
    <NativeAssemblyReference Include="nvToolsExt64_1" Variant="cuda\" />
    <NativeAssemblyReference Include="nvrtc-builtins64_128" Variant="cuda\" />
    <NativeAssemblyReference Include="nvrtc64_120_0" Variant="cuda\" />
    <NativeAssemblyReference Include="nvrtc64_120_0.alt" Variant="cuda\" />
    <NativeAssemblyReference Include="torch" Variant="cuda\" />
    <NativeAssemblyReference Include="torch_cpu" Variant="cuda\" />
    <NativeAssemblyReference Include="torch_cuda" Variant="cuda\" />
    <NativeAssemblyReference Include="torch_global_deps" Variant="cuda\" />
    <NativeAssemblyReference Include="uv" Variant="cuda\" />
    <NativeAssemblyReference Include="zlibwapi" Variant="cuda\" />
  </ItemGroup>

	<!-- Mac arm64 libtorch binary list used for examples and testing -->
  <ItemGroup Condition="'$(NativeTargetArchitecture)' == 'arm64'and $([MSBuild]::IsOSPlatform('osx')) and '$(TestUsesLibTorch)' == 'true'  and '$(SkipNative)' != 'true' ">
    <NativeAssemblyReference Include="c10" />
    <NativeAssemblyReference Include="omp" />
    <NativeAssemblyReference Include="shm" />
    <NativeAssemblyReference Include="torch" />
    <NativeAssemblyReference Include="torch_cpu" />
    <NativeAssemblyReference Include="torch_global_deps" />
    <NativeAssemblyReference Include="torch_python" />
  </ItemGroup>

  <!-- Linux CPU libtorch binary list used for examples and testing -->
  <ItemGroup Condition="'$(NativeTargetArchitecture)' == 'x64' and $([MSBuild]::IsOSPlatform('linux')) and '$(TestUsesLibTorch)' == 'true'  and '$(SkipNative)' != 'true' ">
    <NativeAssemblyReference Include="aoti_custom_ops" />
    <NativeAssemblyReference Include="backend_with_compiler" />
    <NativeAssemblyReference Include="c10" />
    <NativeAssemblyReference Include="jitbackend_test" />
    <NativeAssemblyReference Include="nnapi_backend" />
    <NativeAssemblyReference Include="shm" />
    <NativeAssemblyReference Include="torch" />
    <NativeAssemblyReference Include="torch_cpu" />
    <NativeAssemblyReference Include="torch_global_deps" />
    <NativeAssemblyReference Include="torch_python" />
    <NativeAssemblyReference Include="torchbind_test" />
    <NativeAssemblyReference Include="gomp-98b21ff3" ExtraExtension=".1" />
  </ItemGroup>

  <Target Name="CopyNativeAssemblies"
          BeforeTargets="PrepareForRun"
					Condition="'$(SkipTests)' != 'true'">

    <PropertyGroup>
      <NativeLibPrefix Condition="'$(TargetOS)' == 'linux' OR '$(TargetOS)' == 'mac'">lib</NativeLibPrefix>
      <NativeLibExtension Condition="'$(TargetOS)' == 'windows'">.dll</NativeLibExtension>
      <NativeLibExtension Condition="'$(TargetOS)' == 'linux'">.so</NativeLibExtension>
      <NativeLibExtension Condition="'$(TargetOS)' == 'mac'">.dylib</NativeLibExtension>
    </PropertyGroup>

    <ItemGroup>
      <NativeAssemblyReference>
        <FullAssemblyPath>$(NativeOutputPath)%(NativeAssemblyReference.Variant)$(NativeLibPrefix)%(NativeAssemblyReference.Identity)$(NativeLibExtension)%(NativeAssemblyReference.ExtraExtension)</FullAssemblyPath>
      </NativeAssemblyReference>
    </ItemGroup>

    <Copy SourceFiles = "@(NativeAssemblyReference->'%(FullAssemblyPath)')"
          DestinationFolder="$(OutputPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          SkipUnchangedFiles="true"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

  </Target>

</Project>